{
  "name": "articlegen_airtable",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "article-generator",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "3fd0dbe6-b3c1-489a-a844-e912af37d49f",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2656,
        48
      ],
      "webhookId": "f89c1d5f-2b92-4754-a227-92d20b48eee3"
    },
    {
      "parameters": {
        "jsCode": "// Parse URL-encoded form data\nif ($input.item.json.body && typeof $input.item.json.body === 'object') {\n    // Data is already parsed (likely from test execution)\n    return $input.item.json;\n} else {\n    // Parse the raw body for actual webhook calls\n    const parsedBody = {};\n    const body = $input.item.json.body || '';\n    \n    body.split('&').forEach(pair => {\n        const [key, value] = pair.split('=');\n        parsedBody[key] = decodeURIComponent(value || '');\n    });\n    \n    return {\n        ...$input.item.json,\n        body: parsedBody\n    };\n}"
      },
      "id": "1757ec8a-c34c-48a4-834a-769a9ac0f515",
      "name": "Parse Form Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2432,
        48
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.body && $json.body.prompt }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "condition2",
              "leftValue": "={{ parseInt($json.body.wordCount) }}",
              "rightValue": 100,
              "operator": {
                "type": "number",
                "operation": "largerEqual"
              }
            },
            {
              "id": "condition3",
              "leftValue": "={{ parseInt($json.body.wordCount) }}",
              "rightValue": 1500,
              "operator": {
                "type": "number",
                "operation": "smallerEqual"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a475e819-4586-4d66-a8ed-8407cae9ea61",
      "name": "Check Form Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2656,
        1440
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Article Generator</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 700px; margin: 50px auto; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }\n        .form-container { background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }\n        h1 { color: #333; text-align: center; margin-bottom: 10px; font-size: 2.5em; }\n        .subtitle { color: #666; text-align: center; margin-bottom: 30px; font-size: 1.1em; }\n        .form-group { margin-bottom: 25px; }\n        label { display: block; margin-bottom: 8px; font-weight: 600; color: #555; font-size: 1.1em; }\n        input, textarea { width: 100%; padding: 15px; border: 2px solid #e1e5e9; border-radius: 8px; font-size: 16px; transition: border-color 0.3s; box-sizing: border-box; }\n        input:focus, textarea:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); }\n        textarea { height: 120px; resize: vertical; font-family: inherit; }\n        button { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 30px; border: none; border-radius: 8px; cursor: pointer; font-size: 18px; font-weight: 600; width: 100%; transition: transform 0.2s; }\n        button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4); }\n        button:active { transform: translateY(0); }\n        .required { color: #e74c3c; }\n        .loading { display: none; text-align: center; margin-top: 20px; }\n        .spinner { border: 3px solid #f3f3f3; border-top: 3px solid #667eea; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 0 auto; }\n        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }\n        .error { color: #e74c3c; margin-top: 10px; }\n    </style>\n</head>\n<body>\n    <div class=\"form-container\">\n        <h1>ðŸ¤– AI Article Generator</h1>\n        <p class=\"subtitle\">Generate high-quality articles with AI detection and automatic publishing</p>\n        <form id=\"articleForm\" method=\"POST\">\n            <div class=\"form-group\">\n                <label for=\"prompt\">Article Prompt <span class=\"required\">*</span></label>\n                <textarea name=\"prompt\" id=\"prompt\" required placeholder=\"Enter your detailed article prompt. For example: 'Act as a copywriter for a health company. Write persuasive content about custom vegan diet plans that help people lose weight naturally...'\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"wordCount\">Target Word Count <span class=\"required\">*</span></label>\n                <input type=\"number\" name=\"wordCount\" id=\"wordCount\" required placeholder=\"1000\" min=\"100\" max=\"5000\">\n                <div id=\"wordCountError\" class=\"error\" style=\"display: none;\">Word count must be between 100 and 5000</div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"tone\">Writing Tone & Style</label>\n                <input type=\"text\" name=\"tone\" id=\"tone\" placeholder=\"professional, casual, technical, persuasive, friendly (optional - defaults to professional)\">\n            </div>\n            <button type=\"submit\" id=\"submitBtn\">Generate Article âœ¨</button>\n            <div class=\"loading\" id=\"loading\">\n                <div class=\"spinner\"></div>\n                <p>Generating your article... This may take a few minutes.</p>\n            </div>\n        </form>\n    </div>\n    <script>\n        document.getElementById('articleForm').addEventListener('submit', function(e) {\n            const wordCount = parseInt(document.getElementById('wordCount').value);\n            const errorElement = document.getElementById('wordCountError');\n            \n            if (wordCount < 100 || wordCount > 5000) {\n                e.preventDefault();\n                errorElement.style.display = 'block';\n                return false;\n            } else {\n                errorElement.style.display = 'none';\n                document.getElementById('submitBtn').style.display = 'none';\n                document.getElementById('loading').style.display = 'block';\n            }\n        });\n    </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "id": "5f1d06c0-bb06-46dd-9262-d110915236d4",
      "name": "Show Form",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -2208,
        48
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Validation Error</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }\n        .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }\n        h1 { color: #e74c3c; text-align: center; margin-bottom: 20px; }\n        .error-message { background: #fdecea; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 4px solid #e74c3c; }\n        .actions { text-align: center; margin-top: 30px; }\n        .btn { display: inline-block; padding: 12px 24px; margin: 10px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; border-radius: 8px; font-weight: 600; transition: transform 0.2s; }\n        .btn:hover { transform: translateY(-2px); }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>âš ï¸ Validation Error</h1>\n        <div class=\"error-message\">\n            <p>Please provide both a prompt and a valid word count (between 100 and 5000 words).</p>\n        </div>\n        <div class=\"actions\">\n            <a href=\"/webhook/article-generator\" class=\"btn\">Try Again</a>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {
          "responseCode": 400,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "id": "3c9b9fd7-a518-434c-a419-4be0d2454d71",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -2656,
        992
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1b2c3d4",
              "name": "prompt",
              "value": "={{ $json.body.prompt }}",
              "type": "string"
            },
            {
              "id": "e5f6g7h8",
              "name": "wordCount",
              "value": "={{ parseInt($json.body.wordCount) }}",
              "type": "number"
            },
            {
              "id": "i9j0k1l2",
              "name": "tone",
              "value": "={{ $json.body.tone || 'professional' }}",
              "type": "string"
            },
            {
              "id": "m3n4o5p6",
              "name": "rewriteAttempts",
              "value": 0,
              "type": "number"
            },
            {
              "id": "q7r8s9t0",
              "name": "maxAttempts",
              "value": 3,
              "type": "number"
            },
            {
              "id": "u1v2w3x4",
              "name": "targetAIScore",
              "value": 10,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "aab6cf03-b7de-4a65-b77c-58a36d69ca80",
      "name": "Initialize Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2208,
        240
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "GPT-4-Turbo"
        },
        "messages": {
          "values": [
            {
              "content": "=\"Write a comprehensive article on the following topic:\\n\\nTopic: ={{ $json.prompt }}\\nTarget Word Count: ={{ $json.wordCount }} words\\nTone/Style: ={{ $json.tone }}\\n\\n**Formatting Requirements:**\\n1. # [Catchy Headline in H1]\\n2. [Engaging introduction paragraph]\\n3. ## [Main Section Heading in H2]\\n4. [Content paragraph]\\n5. ### [Subsection in H3 if needed]\\n6. [Content paragraph]\\n7. - Use bullet points for lists\\n8. - Like this example\\n9. ## [Another Main Section in H2]\\n10. [More content]\\n11. # Conclusion\\n12. [Summary of key points]\\n\\nProvide the output in this exact JSON format:\\n{\\n  \\\"title\\\": \\\"Article Title\\\",\\n  \\\"content\\\": \\\"Full article content with Markdown formatting\\\"\\n}\""
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "maxTokens": "={{ Math.min($json.wordCount * 1.5, 4000) }}",
          "temperature": 0.7
        }
      },
      "id": "1cb5dc6f-e5fe-458f-b48b-13143d16f49e",
      "name": "Generate Initial Article",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.5,
      "position": [
        -1984,
        240
      ],
      "credentials": {
        "openAiApi": {
          "id": "2nipFUqTLSnWySli",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Debug: Log the raw response\nconsole.log('Raw OpenAI Response:', JSON.stringify($input.item.json, null, 2));\n\nconst response = $input.item.json;\nlet article = null;\nlet currentContent = null;\nlet title = null;\n\n// Try multiple ways to extract the content\nif (response.message && response.message.content) {\n    const content = response.message.content;\n    console.log('Message content:', content);\n    \n    try {\n        // Try parsing as JSON\n        article = JSON.parse(content);\n        currentContent = article.content || null;\n        title = article.title || null;\n        console.log('Successfully parsed JSON:', { title, contentLength: currentContent?.length });\n    } catch (e) {\n        console.log('JSON parse failed:', e.message);\n        // If JSON parsing fails, treat the entire content as the article\n        currentContent = content;\n        title = 'Generated Article';\n        article = { title, content: currentContent };\n    }\n} else if (response.content) {\n    // Alternative path if content is directly available\n    try {\n        article = JSON.parse(response.content);\n        currentContent = article.content || null;\n        title = article.title || null;\n    } catch (e) {\n        currentContent = response.content;\n        title = 'Generated Article';\n        article = { title, content: currentContent };\n    }\n} else {\n    console.log('No content found in response');\n}\n\nreturn {\n    article: article,\n    currentContent: currentContent,\n    title: title,\n    rewriteAttempts: $node['Initialize Variables'].json.rewriteAttempts,\n    debug: {\n        hasMessage: !!response.message,\n        hasContent: !!response.content,\n        messageContentType: typeof response.message?.content,\n        rawResponse: response\n    }\n};"
      },
      "id": "5c2a869a-28dc-47d2-9177-36d3b7f8268c",
      "name": "Parse Article",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1632,
        240
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.sapling.ai/api/v1/aidetect",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "08434974-88eb-459c-9ec2-b28a23c93fa4",
      "name": "Check AI Detection Score",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1184,
        240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "k7l8m9n0",
              "name": "aiScore",
              "value": "={{ $json.score ? $json.score * 100 : 0 }}",
              "type": "number"
            },
            {
              "id": "o1p2q3r4",
              "name": "needsRewrite",
              "value": "={{ ($json.score ? ($json.score * 100) : 0) > $node['Initialize Variables'].json.targetAIScore }}",
              "type": "boolean"
            },
            {
              "id": "s5t6u7v8",
              "name": "currentContent",
              "value": "={{ $node['Parse Article'].json.currentContent }}",
              "type": "string"
            },
            {
              "id": "w9x0y1z2",
              "name": "title",
              "value": "={{ $node['Parse Article'].json.title }}",
              "type": "string"
            },
            {
              "id": "a3b4c5d6",
              "name": "rewriteAttempts",
              "value": "={{ $node['Parse Article'].json.rewriteAttempts }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "5d750eea-7956-46e0-8496-f91aa5444ba0",
      "name": "Process AI Score",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -960,
        48
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.needsRewrite }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            },
            {
              "id": "condition2",
              "leftValue": "={{ $json.rewriteAttempts }}",
              "rightValue": "={{ $node['Initialize Variables'].json.maxAttempts }}",
              "operator": {
                "type": "number",
                "operation": "smaller"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "399a8053-8330-4459-9dae-6a4d81067c9c",
      "name": "Check If Needs Rewrite",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -736,
        48
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "GPT-4-Turbo"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert content editor specializing in making AI-generated content indistinguishable from human writing. The article below has an AI detection score of {{ $json.aiScore }}% and needs to be rewritten to sound more naturally human while maintaining its core message and quality.\n\nORIGINAL CONTEXT AND INSTRUCTIONS: {{ $node['Initialize Variables'].json.prompt }}\n\nCURRENT REWRITE ATTEMPT: {{ $json.rewriteAttempts + 1 }} of {{ $node['Initialize Variables'].json.maxAttempts }}\n\n**REWRITING GUIDELINES:**\n1. **Sentence Variation**: Mix short punchy sentences with longer, complex ones. Avoid repetitive patterns.\n2. **Personal Touch**: Add subtle personal insights, opinions, or \"in my experience\" type statements where appropriate\n3. **Natural Flow**: Use transitional phrases that humans naturally use (\"That said...\", \"Here's the thing...\", \"What's interesting is...\")\n4. **Imperfect Structure**: Occasionally break formal writing rules naturally (start sentences with \"And\" or \"But\" when it feels right)\n5. **Conversational Elements**: Include rhetorical questions, direct reader address, or casual asides\n6. **Authentic Voice**: Make it sound like it's written by someone with real expertise and genuine passion for the topic\n7. **Subtle Inconsistencies**: Add minor stylistic variations that humans naturally have\n8. **Emotional Resonance**: Include subtle emotional cues that show the writer cares about the reader's success\n\n**MAINTAIN THESE ELEMENTS:**\n- Proper Markdown formatting (H1, H2, H3 headings, bullet points)\n- Same approximate word count ({{ $node['Initialize Variables'].json.wordCount }} words)\n- Core message and valuable information\n- Target audience appropriateness from original context\n- Professional quality and credibility\n- The article's original purpose and intent\n\n**ORIGINAL ARTICLE TO REWRITE:**\nTitle: {{ $json.title }}\nContent: {{ $json.currentContent }}\n\nRewrite this to sound like it was written by a human expert who genuinely cares about the topic and the reader's success. Make it engaging, authentic, and naturally imperfect while keeping all the valuable information intact. The goal is to reduce the AI detection score significantly while improving readability and engagement.\n\nProvide the output in the following JSON format:\n{\n  \"title\": \"Rewritten Title (can be slightly modified for better human appeal)\",\n  \"content\": \"Rewritten article content that sounds naturally human with proper Markdown formatting\"\n}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "maxTokens": "={{ Math.min($node['Initialize Variables'].json.wordCount * 1.5, 4000) }}",
          "temperature": 0.9
        }
      },
      "id": "76e7dc05-0c26-475e-9eab-ab34e37d38f0",
      "name": "Rewrite Article",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.5,
      "position": [
        -512,
        -48
      ],
      "credentials": {
        "openAiApi": {
          "id": "2nipFUqTLSnWySli",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "v5w6x7y8",
              "name": "currentContent",
              "value": "={{ $json.message && $json.message.content ? (function() { try { const parsed = JSON.parse($json.message.content); return parsed.content || $node['Process AI Score'].json.currentContent; } catch(e) { return $node['Process AI Score'].json.currentContent; } })() : $node['Process AI Score'].json.currentContent }}",
              "type": "string"
            },
            {
              "id": "z9a0b1c2",
              "name": "title",
              "value": "={{ $json.message && $json.message.content ? (function() { try { const parsed = JSON.parse($json.message.content); return parsed.title || $node['Process AI Score'].json.title; } catch(e) { return $node['Process AI Score'].json.title; } })() : $node['Process AI Score'].json.title }}",
              "type": "string"
            },
            {
              "id": "d3e4f5g6",
              "name": "rewriteAttempts",
              "value": "={{ $node['Process AI Score'].json.rewriteAttempts + 1 }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "e80b5da1-59f8-40fb-b2b8-de7768745300",
      "name": "Update After Rewrite",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -160,
        128
      ]
    },
    {
      "parameters": {
        "jsCode": "// Count words in the content\nconst content = $input.item.json.currentContent;\nconst wordCount = content ? content.trim().split(/\\s+/).length : 0;\n\n// Get original prompt and other data\nconst originalPrompt = $node['Initialize Variables'].json.prompt;\nconst aiScore = $input.item.json.aiScore || 0;\nconst rewriteAttempts = $input.item.json.rewriteAttempts || 0;\n\nreturn {\n  title: $input.item.json.title,\n  content: content,\n  wordCount: wordCount,\n  aiScore: aiScore,\n  originalPrompt: originalPrompt,\n  rewriteAttempts: rewriteAttempts,\n  creationDate: new Date().toISOString()\n};"
      },
      "id": "9472ba5e-f5a5-417d-875c-ec474d33a45e",
      "name": "Prepare Airtable Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        144
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=<!DOCTYPE html>\n<html>\n<head>\n    <title>Article Generation Complete</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }\n        .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }\n        h1 { color: #333; text-align: center; margin-bottom: 20px; }\n        .success { color: #27ae60; font-weight: bold; font-size: 1.2em; text-align: center; margin-bottom: 30px; }\n        .info { background: linear-gradient(135deg, #667eea15, #764ba215); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 4px solid #667eea; }\n        .metric { display: inline-block; margin-right: 30px; margin-bottom: 10px; }\n        .label { font-weight: bold; color: #666; }\n        .value { color: #333; font-size: 1.1em; }\n        .actions { text-align: center; margin-top: 30px; }\n        .btn { display: inline-block; padding: 12px 24px; margin: 10px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; border-radius: 8px; font-weight: 600; transition: transform 0.2s; }\n        .btn:hover { transform: translateY(-2px); }\n        .title-display { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0; font-style: italic; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>âœ… Article Successfully Generated!</h1>\n        <p class=\"success\">Your article has been created and saved to Airtable!</p>\n        \n        <div class=\"title-display\">\n            <strong>Article Title:</strong> {{ $json.title }}\n        </div>\n        \n        <div class=\"info\">\n            <div class=\"metric\">\n                <span class=\"label\">Word Count:</span>\n                <span class=\"value\">{{ $json.wordCount }}</span>\n            </div>\n            <div class=\"metric\">\n                <span class=\"label\">AI Detection Score:</span>\n                <span class=\"value\">{{ $json.aiScore }}%</span>\n            </div>\n            <div class=\"metric\">\n                <span class=\"label\">Rewrite Attempts:</span>\n                <span class=\"value\">{{ $json.rewriteAttempts }}</span>\n            </div>\n        </div>\n        \n        <div class=\"actions\">\n            <a href=\"/webhook/article-generator\" class=\"btn\">Generate Another Article</a>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "id": "0bed8462-a0a5-4b49-9be3-7d7fa08539a6",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        64,
        352
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appVHyWpZjm1GLoKz",
          "mode": "list",
          "cachedResultName": "ArticleStore",
          "cachedResultUrl": "https://airtable.com/appVHyWpZjm1GLoKz"
        },
        "table": {
          "__rl": true,
          "value": "tblkudiRSoJwf4Q4F",
          "mode": "list",
          "cachedResultName": "Articles",
          "cachedResultUrl": "https://airtable.com/appVHyWpZjm1GLoKz/tblkudiRSoJwf4Q4F"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Title": "\"={{ $json.title }}\"",
            "Content": "\"={{ $json.content }}\"",
            "AI Score": "=\"={{ $json.aiScore }}\"",
            "Word Count": "=\"={{ $json.wordCount }}\"",
            "Original Prompt": "\"={{ $json.originalPrompt }}\"",
            "Rewrite Attempts": "=\"={{ $json.rewriteAttempts }}\"",
            "Creation Date": "=\"={{ $json.creationDate }}\""
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Content",
              "displayName": "Content",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Word Count",
              "displayName": "Word Count",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "AI Score",
              "displayName": "AI Score",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Original Prompt",
              "displayName": "Original Prompt",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Rewrite Attempts",
              "displayName": "Rewrite Attempts",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Creation Date",
              "displayName": "Creation Date",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -160,
        352
      ],
      "id": "568485f4-d3e8-4b4e-aad0-aeabd8dd4d94",
      "name": "Save to Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "lsSVzmWHf9W8pVYi",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Error Generating Article</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }\n        .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }\n        h1 { color: #e74c3c; text-align: center; margin-bottom: 20px; }\n        .error-message { background: #fdecea; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 4px solid #e74c3c; }\n        .actions { text-align: center; margin-top: 30px; }\n        .btn { display: inline-block; padding: 12px 24px; margin: 10px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; border-radius: 8px; font-weight: 600; transition: transform 0.2s; }\n        .btn:hover { transform: translateY(-2px); }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>âš ï¸ Error Generating Article</h1>\n        <div class=\"error-message\">\n            <p>We encountered an error while generating your article. Please try again later.</p>\n            <p>Error details: {{ $json.error }}</p>\n        </div>\n        <div class=\"actions\">\n            <a href=\"/webhook/article-generator\" class=\"btn\">Try Again</a>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {
          "responseCode": 500,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "id": "6f5750c1-9cd5-43e0-a4cd-eb66080c3783",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -2656,
        768
      ]
    },
    {
      "parameters": {
        "errorMessage": "Sapling AI detection service error!"
      },
      "id": "c423d4c5-332e-4a2b-b482-31436d61bd31",
      "name": "AI Detection Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -960,
        368
      ]
    },
    {
      "parameters": {
        "errorMessage": "Content parsing failed - unable to extract article content from OpenAI response. Please check the OpenAI model configuration and JSON output setting."
      },
      "id": "c8527413-bacb-4ef7-bf9a-9f2397cfdfc5",
      "name": "Content Parse Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -2432,
        544
      ]
    },
    {
      "parameters": {
        "errorMessage": "Airtable Error!"
      },
      "id": "aae2d936-a550-448e-b46a-5439d27b0923",
      "name": "Airtable Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -2656,
        1216
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.currentContent }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "condition2",
              "leftValue": "={{ $json.currentContent }}",
              "rightValue": {},
              "operator": {
                "type": "object",
                "operation": "notEqual"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "f91cd753-8647-4fa5-b3d1-f9a7ad76711d",
      "name": "Check Content Valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2656,
        544
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare Sapling API request data\nconst content = $input.item.json.currentContent;\n\n// Your Sapling API key - replace with your actual key\nconst SAPLING_API_KEY = \"YOUR_SAPLING_API_KEY_HERE\";\n\n// Validate content\nif (!content || typeof content !== 'string' || content.trim().length === 0) {\n    throw new Error('No valid content available for AI detection');\n}\n\n// Clean and prepare the content (limit to 200k characters as per Sapling API)\nlet cleanContent = content\n    .replace(/[\\u0000-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F]/g, '') // Remove control characters\n    .trim();\n\n// Limit content length (Sapling API has 200k character limit)\nif (cleanContent.length > 200000) {\n    cleanContent = cleanContent.substring(0, 200000);\n}\n\n// Prepare the request payload\nconst requestPayload = {\n    key: SAPLING_API_KEY,\n    text: cleanContent,\n    sent_scores: true\n};\n\nconsole.log('Preparing Sapling request for content length:', cleanContent.length);\n\nreturn {\n    // Pass through all existing data\n    ...($input.item.json),\n    // Add new fields for the API request\n    requestPayload: requestPayload,\n    requestPayloadString: JSON.stringify(requestPayload),\n    cleanContent: cleanContent\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1408,
        240
      ],
      "id": "9f0dcd4a-5b7e-4692-a1f8-c80224715981",
      "name": "Prepare Sapling Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Form Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Form Data": {
      "main": [
        [
          {
            "node": "Show Form",
            "type": "main",
            "index": 0
          },
          {
            "node": "Initialize Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Variables": {
      "main": [
        [
          {
            "node": "Generate Initial Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Initial Article": {
      "main": [
        [
          {
            "node": "Parse Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Article": {
      "main": [
        [
          {
            "node": "Prepare Sapling Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Content Valid": {
      "main": [
        [],
        [
          {
            "node": "Content Parse Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AI Detection Score": {
      "main": [
        [
          {
            "node": "Process AI Score",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Detection Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Score": {
      "main": [
        [
          {
            "node": "Check If Needs Rewrite",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Needs Rewrite": {
      "main": [
        [
          {
            "node": "Prepare Airtable Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Rewrite Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rewrite Article": {
      "main": [
        [
          {
            "node": "Update After Rewrite",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update After Rewrite": {
      "main": [
        [
          {
            "node": "Check AI Detection Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Airtable Data": {
      "main": [
        [
          {
            "node": "Save to Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Airtable": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Sapling Request": {
      "main": [
        [
          {
            "node": "Check AI Detection Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "42cf7354-8d73-411f-9600-72900678a283",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "78ce5a5377274f9298837c1f5755493b7a72f2a100b80c779f56af39bf59618a"
  },
  "id": "Bf9AGXIu0FuqaKac",
  "tags": []
}
